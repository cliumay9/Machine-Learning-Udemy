source('~/Desktop/RevJet/revjet_DataPreprocessing.R')
# Building Logistic Classification Model
Lclassifier = glm(CTR~.,
family = binomial,
data = training_set)
prob_pred = predict(classifier, type = 'response', newdata = test_set[,-10])
View(training_set)
source('~/.active-rstudio-document')
# Building Logistic Classification Model
Lclassifier = glm(CTR~.,
family = binomial,
data = training_set)
prob_pred = predict(classifier, type = 'response', newdata = test_set[,-10])
Lclassifier = glm(CTR~.,
family = binomial,
data = training_set)
prob_pred = predict(Lclassifier, type = 'response', newdata = test_set[,-10])
Lclassifier = glm(CTR~.,
family = binomial,
data = training_set)
View(training_set)
View(d)
View(rawdataset)
View(dataset)
source('~/.active-rstudio-document')
View(training_set)
Lclassifier = glm(CTR~.,
family = binomial,
data = training_set)
prob_pred = predict(Lclassifier, type = 'response', newdata = test_set[,-10])
prob_pred
y_pred = ifelse(prob_pred>=0.5, 1, 0)
# Logistic Regression
setwd("~/Desktop/Ex_Files_DSF_DataMining/Machine-Learning-Udemy/Logistic_Classification")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split = TRUE)
test_set = subset(dataset, split = FALSE)
# Feature Scaling
training_set[,1:2] = scale(training_set[,1:2])
test_set[,1:2] = scale(test_set[,1:2])
## Creating Logistic classifier
classifier = glm(Purchased~.,
family = binomial,
data = training_set)
#Predicting the test result
prob_pred = predict(classifier, type = 'response', newdata = test_set[,-3])
# response response vector
y_pred = ifelse(prob_pred>=0.5, 1, 0)
y_pred
View(test_set)
View(training_set)
prob_pred = predict(classifier, type = 'response', newdata = test_set[,-3])
# Logistic Regression
setwd("~/Desktop/Ex_Files_DSF_DataMining/Machine-Learning-Udemy/Logistic_Classification")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split = TRUE)
test_set = subset(dataset, split = FALSE)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,1:2] = scale(training_set[,1:2])
test_set[,1:2] = scale(test_set[,1:2])
## Creating Logistic classifier
classifier = glm(Purchased~.,
family = binomial,
data = training_set)
#Predicting the test result
prob_pred = predict(classifier, type = 'response', newdata = test_set[,-3])
# response response vector
y_pred = ifelse(prob_pred>=0.5, 1, 0)
y_pred
cm= table(test_set[,3],y_pred)
cm
# Logistic Regression
setwd("~/Desktop/Ex_Files_DSF_DataMining/Machine-Learning-Udemy/Logistic_Classification")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,1:2] = scale(training_set[,1:2])
test_set[,1:2] = scale(test_set[,1:2])
## Creating Logistic classifier
classifier = glm(Purchased~.,
family = binomial,
data = training_set)
#Predicting the test result
prob_pred = predict(classifier, type = 'response', newdata = test_set[,-3])
# response response vector
y_pred = ifelse(prob_pred>=0.5, 1, 0)
#Building Confusion matrix
cm= table(test_set[,3],y_pred)
cm
set = training_set
X1= seq(min(set[,1])-1, max(set[,1])+1, by =0.01)
X2 = seq(min(set[,2])-1, max(set[,2])+1, by =0.01)
# install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
X1= seq(min(set[,1])-1, max(set[,1])+1, by =0.01)
X2 = seq(min(set[,2])-1, max(set[,2])+1, by =0.01)
grid_set = expand.grid(X1,X2)
colnames(grid_set)=c('Age','EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata= grid_set)
y_grid = ifelse(prob_set>0.5, 1, 0)
library(ElemStatLearn)
set = training_set
X1= seq(min(set[,1])-1, max(set[,1])+1, by =0.01)
X2 = seq(min(set[,2])-1, max(set[,2])+1, by =0.01)
grid_set = expand.grid(X1,X2)
colnames(grid_set)=c('Age','EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata= grid_set)
y_grid = ifelse(prob_set>0.5, 1, 0)
plot(set[,-3],
main = "Logistic Regression (Training Set)",
xlab = 'Age', ylab='Estimated Salary',
xlim = range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add= TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid==1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[,3]==1, 'green4','red3'))
set = test_set
X1= seq(min(set[,1])-1, max(set[,1])+1, by =0.01)
X2 = seq(min(set[,2])-1, max(set[,2])+1, by =0.01)
grid_set = expand.grid(X1,X2)
colnames(grid_set)=c('Age','EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata= grid_set)
y_grid = ifelse(prob_set>0.5, 1, 0)
plot(set[,-3],
main = "Logistic Regression (Test Set)",
xlab = 'Age', ylab='Estimated Salary',
xlim = range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add= TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid==1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[,3]==1, 'green4','red3'))
setwd("~/Desktop/Ex_Files_DSF_DataMining/Machine-Learning-Udemy/DecisionTreeClassification")
install.packages('rpart')
# Decision Tree Classification
setwd("~/Desktop/Ex_Files_DSF_DataMining/Machine-Learning-Udemy/DecisionTreeClassification")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library('rpart')
library('rpart')
library(rpart)
classifier = rpart(Purchased~., data=training_set)
y_pred = predict(classifier, test_set[-3])
cm
cm= table(test_set[,3],y_pred)
cm
View(training_set)
View(test_set)
# Decision Tree Classification
setwd("~/Desktop/Ex_Files_DSF_DataMining/Machine-Learning-Udemy/DecisionTreeClassification")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(dataset)
View(training_set)
classifier = rpart(Purchased~, data=training_set, type= 'class')
classifier = rpart(Purchased~. , data=training_set)
y_pred = predict(classifier, test_set[-3])
y_pred
classifier = rpart(Purchased~. , data=training_set, type= 'class')
classifier = rpart(Purchased~. , data=training_set)
y_pred = predict(classifier, test_set[-3], type = 'class')
classifier = rpart(Purchased~. , data=training_set)
y_pred = predict(classifier, newdata=test_set[-3])
y_pred
y_pred = predict(classifier, newdata=test_set[-3], type = 'class')
# Decision Tree Classification
setwd("~/Desktop/Ex_Files_DSF_DataMining/Machine-Learning-Udemy/DecisionTreeClassification")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
# Encode the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# install.packages('rpart')
library(rpart)
classifier = rpart(Purchased~. , data=training_set)
y_pred = predict(classifier, newdata=test_set[-3], type = 'class')
y_pred
y_pred = predict(classifier, newdata=test_set[-3])
y_pred
y_pred = predict(classifier, newdata=test_set[-3], type = 'class')
#Building Confusion matrix
cm= table(test_set[,3],y_pred)
cm
# install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
X1= seq(min(set[,1])-1, max(set[,1])+1, by =0.01)
X2 = seq(min(set[,2])-1, max(set[,2])+1, by =0.01)
grid_set = expand.grid(X1,X2)
colnames(grid_set)=c('Age','EstimatedSalary')
y_pred = predict(classifier, newdata= grid_set, type = 'class')
plot(set[,-3],
main = "Decision Tree Classification (Training Set)",
xlab = 'Age', ylab='Estimated Salary',
xlim = range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add= TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid==1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[,3]==1, 'green4','red3'))
library(ElemStatLearn)
set = training_set
X1= seq(min(set[,1])-1, max(set[,1])+1, by =0.01)
X2 = seq(min(set[,2])-1, max(set[,2])+1, by =0.01)
grid_set = expand.grid(X1,X2)
colnames(grid_set)=c('Age','EstimatedSalary')
y_grid = predict(classifier, newdata= grid_set, type = 'class')
plot(set[,-3],
main = "Decision Tree Classification (Training Set)",
xlab = 'Age', ylab='Estimated Salary',
xlim = range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add= TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid==1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[,3]==1, 'green4','red3'))
library(ElemStatLearn)
set = test_set
X1= seq(min(set[,1])-1, max(set[,1])+1, by =0.01)
X2 = seq(min(set[,2])-1, max(set[,2])+1, by =0.01)
grid_set = expand.grid(X1,X2)
colnames(grid_set)=c('Age','EstimatedSalary')
prob_set = predict(classifier, type = 'class', newdata= grid_set)
y_grid = ifelse(prob_set>0.5, 1, 0)
plot(set[,-3],
main = "Decision Tree Classification (Test Set)",
xlab = 'Age', ylab='Estimated Salary',
xlim = range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add= TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid==1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[,3]==1, 'green4','red3'))
library(ElemStatLearn)
set = test_set
X1= seq(min(set[,1])-1, max(set[,1])+1, by =0.01)
X2 = seq(min(set[,2])-1, max(set[,2])+1, by =0.01)
grid_set = expand.grid(X1,X2)
colnames(grid_set)=c('Age','EstimatedSalary')
y_grid = predict(classifier, type = 'class', newdata= grid_set)
plot(set[,-3],
main = "Decision Tree Classification (Test Set)",
xlab = 'Age', ylab='Estimated Salary',
xlim = range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add= TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid==1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[,3]==1, 'green4','red3'))
cm = table(test_set[,3], predict(classifier, newdata=test_set[-3]))
y_pred = predict(classifier, newdata=test_set[-3])
cm= table(test_set[,3],y_pred)
cm
setwd("~/Desktop/Ex_Files_DSF_DataMining/Machine-Learning-Udemy/DecisionTreeClassification")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
# Encode the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(dataset)
View(training_set)
View(training_set)
library(rpart)
classifier = rpart(Purchased~. , data=training_set)
y_pred = predict(classifier, newdata=test_set[-3],type = 'class')
#Building Confusion matrix
cm= table(test_set[,3],y_pred)
plot(classifier)
plot(classifier)
text(classifier)
plot(classifier)
text(classifier)
plot(classifier)
text(classifier)
View(dataset)
setwd("~/Desktop/Ex_Files_DSF_DataMining/Machine-Learning-Udemy/DecisionTreeClassification")
dataset = read.csv('Social_Network_Ads.csv')
View(dataset)
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,2:5]
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
library(rpart)
classifier = rpart(Purchased~. , data=training_set)
plot(classifier)
text(classifier)
View(dataset)
View(test_set)
# Decision Tree Classification
setwd("~/Desktop/Ex_Files_DSF_DataMining/Machine-Learning-Udemy/DecisionTreeClassification")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,2:5]
# Encode the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
dataset$Gender = factor(dataset$Gender, levels = c(0,1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
library(rpart)
classifier = rpart(Purchased~. , data=training_set)
plot(classifier)
text(classifier)
View(training_set)
# Decision Tree Classification
setwd("~/Desktop/Ex_Files_DSF_DataMining/Machine-Learning-Udemy/DecisionTreeClassification")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,2:5]
# Encode the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
dataset$Gender = factor(dataset$Gender, levels = c('Male','Female'), labels = c(0,1))
View(training_set)
View(dataset)
c(0,1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
c(0,1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# install.packages('rpart')
library(rpart)
classifier = rpart(Purchased~. , data=training_set)
# Plot the decision tree. DONT FEATURE SCALE
plot(classifier)
text(classifier)
View(training_set)
library(rpart)
classifier = rpart(Purchased~. , data=training_set)
plot(classifier)
text(classifier)
# Decision Tree Classification
setwd("~/Desktop/Ex_Files_DSF_DataMining/Machine-Learning-Udemy/DecisionTreeClassification")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,2:5]
# Encode the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
dataset$Gender = factor(dataset$Gender, levels = c('Male','Female'), labels = c(0,1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
library(rpart)
classifier = rpart(Purchased~. , data=training_set)
plot(classifier)
text(classifier)
plot(classifier)
text(classifier)
library(rpart)
classifier = rpart(Purchased~ Gender+EstimatedSalary+Age , data=training_set)
plot(classifier)
text(classifier)
source('~/.active-rstudio-document', echo=TRUE)
y_pred = predict(classifier, newdata=test_set[-3],type = 'class')
classifier = rpart(Purchased~. , data=training_set)
y_pred = predict(classifier, newdata=test_set[-3],type = 'class')
# Decision Tree Classification
setwd("~/Desktop/Ex_Files_DSF_DataMining/Machine-Learning-Udemy/DecisionTreeClassification")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
# Encode the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# dataset$Gender = factor(dataset$Gender, levels = c('Male','Female'), labels = c(0,1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
library(rpart)
classifier = rpart(Purchased~. , data=training_set)
y_pred = predict(classifier, newdata=test_set[-3],type = 'class')
setwd("~/Desktop/Ex_Files_DSF_DataMining/Machine-Learning-Udemy/RandomForestClassificaiton")
# Random Forest Classification
setwd("~/Desktop/Ex_Files_DSF_DataMining/Machine-Learning-Udemy/RandomForestClassificaiton")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
# Encode the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
install.packages('randomForest')
library(randomForest)
# Random Forest Classification
setwd("~/Desktop/Ex_Files_DSF_DataMining/Machine-Learning-Udemy/RandomForestClassificaiton")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
# Encode the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(randomForest)
classifier = randomForest(x = training_set[-3], y = training_set$Purchased,
ntree=10)
y_pred = predict(classifier, newdata=test_set[-3])
y_pred
cm= table(test_set[,3],y_pred)
cm
source('~/.active-rstudio-document', echo=TRUE)
plot(classifier)
plot(classifier)
classifier = randomForest(x = training_set[-3], y = training_set$Purchased,
ntree=40)
plot(classifier)
y_pred = predict(classifier, newdata=test_set[-3])
#Building Confusion matrix
cm= table(test_set[,3],y_pred)
cm
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-3], y = training_set$Purchased,
ntree=100)
y_pred = predict(classifier, newdata=test_set[-3])
#Building Confusion matrix
cm= table(test_set[,3],y_pred)
cm
classifier = randomForest(x = training_set[-3], y = training_set$Purchased,
ntree=20)
y_pred = predict(classifier, newdata=test_set[-3])
#Building Confusion matrix
cm= table(test_set[,3],y_pred)
cm
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-3], y = training_set$Purchased,
ntree=20)
y_pred = predict(classifier, newdata=test_set[-3])
#Building Confusion matrix
cm= table(test_set[,3],y_pred)
#Building Confusion matrix
cm= table(test_set[,3],y_pred)
# Visualize
# install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
X1= seq(min(set[,1])-1, max(set[,1])+1, by =0.01)
X2 = seq(min(set[,2])-1, max(set[,2])+1, by =0.01)
grid_set = expand.grid(X1,X2)
colnames(grid_set)=c('Age','EstimatedSalary')
y_grid = predict(classifier, newdata= grid_set, type = 'class')
plot(set[,-3],
main = "Random Forest Classification (Training Set)",
xlab = 'Age', ylab='Estimated Salary',
xlim = range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add= TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid==1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[,3]==1, 'green4','red3'))
library(ElemStatLearn)
set = test_set
X1= seq(min(set[,1])-1, max(set[,1])+1, by =0.01)
X2 = seq(min(set[,2])-1, max(set[,2])+1, by =0.01)
grid_set = expand.grid(X1,X2)
colnames(grid_set)=c('Age','EstimatedSalary')
y_grid = predict(classifier, type = 'class', newdata= grid_set)
plot(set[,-3],
main = "Random Forest Classification (Test Set)",
xlab = 'Age', ylab='Estimated Salary',
xlim = range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add= TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid==1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[,3]==1, 'green4','red3'))
